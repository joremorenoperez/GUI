# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui1.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import nidaqmx
from nidaqmx.constants import AcquisitionType, ThermocoupleType, ADCTimingMode, CJCSource
import matplotlib.pyplot as plt
# import numpy as np
# En los comandos inferiores se considera task como nidaqmx.Task()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(598, 497)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.button1 = QtWidgets.QPushButton(self.centralwidget)
        self.button1.setGeometry(QtCore.QRect(40, 390, 141, 31))
        self.button1.setObjectName("button1")
        self.button1.clicked.connect(self.click_start_stop)
        self.button1.clicked.connect(self.plotting)

        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(40, 340, 141, 41))
        self.label1.setAlignment(QtCore.Qt.AlignCenter)
        self.label1.setObjectName("label1")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 598, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.button1.setStatusTip(_translate("MainWindow", "Start/Stop plotting"))
        self.button1.setText(_translate("MainWindow", "Start"))
        self.label1.setText(_translate("MainWindow", "Status: Off"))

    def click_start_stop(self):
        if self.label1.text() == 'Status: Off':
            self.label1.setText('Status: On') #Changes text on 'label' when 'button' is clicked
            self.button1.setText('Stop')
        else:
            self.label1.setText('Status: Off') #Changes text on 'label' when 'button' is clicked
            self.button1.setText('Start')

    def plotting(self):
        i = 0
        x = []
        data1 = []
        data2 = []
        plt.ion()
        with nidaqmx.Task() as task, nidaqmx.Task() as task2:
            # En esta linea se elige el canal: equipoNmoduloN/canal
            chan2=task2.ai_channels.add_ai_thrmcpl_chan("cDAQ1Mod3/ai0", thermocouple_type=ThermocoupleType.K, cjc_source=CJCSource(10200))
            # task2.ai_channels.add_ai_thrmcpl_chan("cDAQ1Mod1/ai1")
            # task2.timing.cfg_samp_clk_timing(rate=70, sample_mode=AcquisitionType.FINITE, samps_per_chan=20)
            # chan.ai_adc_timing_mode = ADCTimingMode(14712)
            # Con el nuevo task podemos leer otro modulo de medidas, en este caso voltajes.    
            chan = task.ai_channels.add_ai_voltage_chan("cDAQ1Mod1/ai0")
            # task.timing.cfg_samp_clk_timing(rate=1000, sample_mode=AcquisitionType.CONTINUOUS, samps_per_chan=2048)


            task.start()
            task2.start()
            while i<100:
            #V =task2.read(1)
                #print(np.mean(a),np.std(a))    
                data1.append(task.read())
                data2.append(task2.read())
                x.append(i)
                i = i+1
                
                plt.plot(x,data2)
                plt.pause(0.1)
                plt.xlim([0,100])
      
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
